/*
 * Copyright (c) 2018 David Aguiar Gonzalez
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package gc.david.dfm.model.v1;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "ENTRY".
*/
public class EntryDao extends AbstractDao<Entry, Long> {

    public static final String TABLENAME = "ENTRY";

    /**
     * Properties of entity Entry.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Nombre = new Property(1, String.class, "nombre", false, "NOMBRE");
        public final static Property Lat_origen = new Property(2, double.class, "lat_origen", false, "LAT_ORIGEN");
        public final static Property Lon_origen = new Property(3, double.class, "lon_origen", false, "LON_ORIGEN");
        public final static Property Lat_destino = new Property(4, double.class, "lat_destino", false, "LAT_DESTINO");
        public final static Property Lon_destino = new Property(5, double.class, "lon_destino", false, "LON_DESTINO");
        public final static Property Distancia = new Property(6, String.class, "distancia", false, "DISTANCIA");
        public final static Property Fecha = new Property(7, String.class, "fecha", false, "FECHA");
    }


    public EntryDao(DaoConfig config) {
        super(config);
    }
    
    public EntryDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"ENTRY\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"NOMBRE\" TEXT NOT NULL ," + // 1: nombre
                "\"LAT_ORIGEN\" REAL NOT NULL ," + // 2: lat_origen
                "\"LON_ORIGEN\" REAL NOT NULL ," + // 3: lon_origen
                "\"LAT_DESTINO\" REAL NOT NULL ," + // 4: lat_destino
                "\"LON_DESTINO\" REAL NOT NULL ," + // 5: lon_destino
                "\"DISTANCIA\" TEXT NOT NULL ," + // 6: distancia
                "\"FECHA\" TEXT NOT NULL );"); // 7: fecha
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"ENTRY\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, Entry entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindString(2, entity.getNombre());
        stmt.bindDouble(3, entity.getLat_origen());
        stmt.bindDouble(4, entity.getLon_origen());
        stmt.bindDouble(5, entity.getLat_destino());
        stmt.bindDouble(6, entity.getLon_destino());
        stmt.bindString(7, entity.getDistancia());
        stmt.bindString(8, entity.getFecha());
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, Entry entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindString(2, entity.getNombre());
        stmt.bindDouble(3, entity.getLat_origen());
        stmt.bindDouble(4, entity.getLon_origen());
        stmt.bindDouble(5, entity.getLat_destino());
        stmt.bindDouble(6, entity.getLon_destino());
        stmt.bindString(7, entity.getDistancia());
        stmt.bindString(8, entity.getFecha());
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public Entry readEntity(Cursor cursor, int offset) {
        Entry entity = new Entry( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.getString(offset + 1), // nombre
            cursor.getDouble(offset + 2), // lat_origen
            cursor.getDouble(offset + 3), // lon_origen
            cursor.getDouble(offset + 4), // lat_destino
            cursor.getDouble(offset + 5), // lon_destino
            cursor.getString(offset + 6), // distancia
            cursor.getString(offset + 7) // fecha
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, Entry entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setNombre(cursor.getString(offset + 1));
        entity.setLat_origen(cursor.getDouble(offset + 2));
        entity.setLon_origen(cursor.getDouble(offset + 3));
        entity.setLat_destino(cursor.getDouble(offset + 4));
        entity.setLon_destino(cursor.getDouble(offset + 5));
        entity.setDistancia(cursor.getString(offset + 6));
        entity.setFecha(cursor.getString(offset + 7));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(Entry entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(Entry entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(Entry entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
